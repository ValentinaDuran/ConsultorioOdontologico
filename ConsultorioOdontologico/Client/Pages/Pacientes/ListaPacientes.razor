@page "/Pacientes"
@inject IHttpService http
@using ConsultorioOdontologico.Client.Servicios
@using ConsultorioOdontologico.BD.Data.Entidades

<h3>Lista de Pacientes</h3>

<a class="btn btn-primary" href="Pacientes/Crear">Nuevo Paciente</a>
<table>
    <tr>
        
        <th>Nombre</th>
        <th>Apellido</th>
        <th>Mail</th>
        <th>Obra Social</th>
        
    </tr>
    
    @if (Pacientes== null)
    {
        <tr>Cargando....</tr>
        
    }
    else if (Pacientes.Count== 0)
    {
        <tr>No existen datos</tr>
    }
    else
    {
       foreach (var item in Pacientes)
       {
          <tr>
               <td>@item.Nombre</td>
               <td>@item.Apellido</td>
               <td>@item.Mail</td>
               <td>@item.NombreObraSocial</td>
               <td>@item.DNI</td>
               <td>@item.Teléfono</td>
               
                <td>
                    <a class="btn btn-primary" href="Pacientes/Editar/@item.Id">Editar</a>
                </td>
                <td>
                    <button class="btn btn-warning" @onclick ="()=>Borrar(item)">Borrar

                    </button>
                </td>

          </tr>
           
       }
    }
</table>

<Confirmacion @ref ="confirmacion"
    verCancelar="true" verOk="true" textCancelar="PEPE" Titulo="Borrar paciente" textOk="Ok" onCancel="Cancelar" onConfirm="Eliminar">
    <div>Está por borrar el paciente @PacienteBorrar.Nombre
        <br/>  
        Está seguro que desea continuar?
    </div>
</Confirmacion>

@code {
    List<Paciente> Pacientes;
    Paciente PacienteBorrar;
    Confirmacion confirmacion;
    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await Leer();

    }
    private async Task Leer()
    {
        var respuesta = await http.Get<List<Paciente>>("api/Pacientes");
        if(!respuesta.Error)
        {
            Pacientes = respuesta.Respuesta;
        }
    }
    private void Borrar(Paciente pacienteBorrar)
    {
        PacienteBorrar = pacienteBorrar;
        confirmacion.Ver();


    }
    private void Cancelar()
    {
        confirmacion.Ocultar();
        PacienteBorrar = null;
    }
    private async Task Eliminar()
    {
        var respuesta = await http.Delete($"api/Pacientes/{PacienteBorrar.Id}");
        if(respuesta.Error)
        {
            var body = "Error";
        }
        Cancelar();
        await Leer();
    }

}
